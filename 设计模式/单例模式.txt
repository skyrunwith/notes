单例模式适用情况：
	类必须只有一个实例，并且必须只有一个访问点，即访问方法
	When the sole instance should be extensible by subclassing, and clients should be able to use an extended instance without modifying their code
	翻译：当唯一的实例应该可以通过子类扩展，并且客户端应该能够使用扩展实例而无需修改其代码(未能理解)
用例：
	The Logging class 日志
	Managing a connection to a database 数据库连接
	File Manager 文件管理器
缺点：
	违反了SPR(单一职责原则)，自身控制创建和生命周期
	鼓励使用全局共享实例，防止资源被回收
	耦合性较高，客户端测试困难
	不可能有子类
实例：	
	java.lang.Runtime java.lang.System
一、Eagerly Initialized 饿汉式
	特点：
		私有构造方法
		实例变量定义时初始化
		final class, final static var
二、Thread Safe Lazy Loaded 懒汉式
	特点：
		final class
		getInstance方法上加上synchronized保证线程安全
		getInstance时判断实例变量是否已初始化
		构造方法中判断实例变量是否已初始化，如果如果已初始化，则抛出异常，未初始化，则将this赋值给instance。保证通过反射实例化线程安全
三、Thread Safe Double Check Locking 双重锁校验
	特点： 
		final class
		volatile：保证原子性，双重锁验证，
	private static volatile ThreadSafeDoubleCheckLocking instance
	
	var result = instance;
    if (result == null) {
      synchronized (ThreadSafeDoubleCheckLocking.class) {
        result = instance;
        if (result == null) {
          instance = result = new ThreadSafeDoubleCheckLocking();
        }
      }
    }
	如果您要创建的单例是静态的（即，将仅创建一个Helper），而不是另一个对象的属性（例如，每个Foo对象将有一个Helper），则有一个简单而优雅的解决方案。采用饿汉式进行初始化
	class HelperSingleton {
	  static Helper singleton = new Helper();//此时Helper对象是静态的
	}
四、Initailizing On Demand Holder Idiom
	特点：
		final class
		使用私有静态内部类初始化其私有静态final变量
		内部类不会比getInstance更早加载，所以这是线程安全的
		相比volatile or synchronized，构造器方法什么事情都不用做
	public static InitializingOnDemandHolderIdiom getInstance() {
		return HelperHolder.INSTANCE;
	}
	private static class HelperHolder {
		private static final InitializingOnDemandHolderIdiom INSTANCE =
			new InitializingOnDemandHolderIdiom();
	}
五、Enum 枚举实现单例
	特点：
		简单、线程安全
		其他方法的线程安全需要开发者自己保证
	public enum EnumIvoryTower {
		INSTANCE;

		@Override
		public String toString() {
			return getDeclaringClass().getCanonicalName() + "@" + hashCode();
		}

		