1.微服务开发VS传统开发
  分工不同，以前我们可能是一个一个模块，现在可能是一人一个系统。
  架构不同，服务的拆分是一个技术含量很高的问题，拆分是否合理对以后发展影响巨大。
  部署方式不同，如果还像以前一样部署估计累死了，自动化运维不可不上。
  容灾不同，好的微服务可以隔离故障避免服务整体down掉，坏的微服务设计仍然可以因为一个子服务出现问题导致连锁反应。
2.服务拆分原则
  横向拆分、纵向拆分
3.数据库挑战
  1）严格按照微服务的划分来做，微服务相互独立，各微服务数据库也独立，后台需要展示数据时，调用各微服务的接口来获取对应的数据，再进行数据处理后展示出来，这是标准的用法，也是最麻烦的用法。
  2) 将业务高度相关的表放到一个库中，将业务关系不是很紧密的表严格按照微服务模式来拆分，这样既可以使用微服务，也避免了数据库分散导致后台系统统计功能难以实现，是一个折中的方案。
  3）数据库严格按照微服务的要求来切分，以满足业务高并发，实时或者准实时将各微服务数据库数据同步到NoSQL数据库中，在同步的过程中进行数据清洗，用来满足后台业务系统的使用，推荐使用MongoDB、HBase等。
4.微服务的经验和建议
  尽量不使用JSP，使用Thymeleaf，独立部署tomcat，不采用内嵌tomcat
  服务编排
  技术选型参考因素：
    1）团队的技术人员是否已经具备相关技术基础。
	2）公司业务是否适合进行微服务化改造，并不是所有的平台都适合进行微服务化改造，比如：传统行业有很多复杂垂直的业务系统。
	3）Spring Cloud生态的技术有很多，并不是每一种技术方案都需要用上，适合自己的才是最好的。
5.测试
  Spring-boot-starter-test
6.配置
  session共享、请求转发zuul，静态资源nginx
7.部署
  Jenkins部署Spring Boot
8.开发
9.运维
  Turbine、zipkin用来做熔断和性能监控；动态上下限某个节点用jenkins实现;Eureka必须高可用
  
//Myself
1.用户认证
  1.API鉴权框架选择JWT，Oauth2
  2.Shiro：SpringBoot，JWT，Redis缓存
  